import axios from 'axios';
import { Dataset } from '../types';

// Base URL for API endpoints
const API_BASE_URL = '/api';

// Create an Axios instance with default config
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000, // 10 seconds timeout
});

// Service object for dataset-related API calls
export const dataService = {
  // Fetch all datasets
  async getDatasets(): Promise<Dataset[]> {
    const response = await api.get('/datasets');
    return response.data;
  },

  // Fetch a single dataset by ID
  async getDataset(id: number): Promise<Dataset> {
    const response = await api.get(`/datasets/${id}`);
    return response.data;
  },

  // Create a new dataset (ID and createdAt are generated by backend)
  async createDataset(dataset: Omit<Dataset, 'id' | 'createdAt'>): Promise<Dataset> {
    const response = await api.post('/datasets', dataset);
    return response.data;
  },

  // Update an existing dataset by ID
  async updateDataset(id: number, dataset: Partial<Dataset>): Promise<Dataset> {
    const response = await api.put(`/datasets/${id}`, dataset);
    return response.data;
  },

  // Delete a dataset by ID
  async deleteDataset(id: number): Promise<void> {
    await api.delete(`/datasets/${id}`);
  },

  // Upload a CSV file and create a dataset from it
  async uploadCSV(file: File): Promise<Dataset> {
    const formData = new FormData();
    formData.append('file', file);
    const response = await api.post('/datasets/upload/csv', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    return response.data;
  },

  // Generate a dataset of a specific type with options (e.g., count, name)
  async generateData(type: string, options: { count?: number; name?: string } = {}): Promise<Dataset> {
    console.log(`Generating data of type: ${type} with options:`, options);
    const response = await api.post(`/datasets/generate/${type}`, options);
    return response.data;
  },

  // Perform a health check on the backend API
  async healthCheck(): Promise<{ status: string; timestamp: string }> {
    const response = await api.get('/health');
    return response.data;
  },
};